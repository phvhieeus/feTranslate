import React, { useState, useRef } from "react";
import Tesseract from "tesseract.js";
import { translateWithGemini } from "../services/openaiTranslation";

export function ImageTranslation() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [extractedText, setExtractedText] = useState("");
  const [translatedText, setTranslatedText] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);
  const [selectedSourceLang, setSelectedSourceLang] = useState("English");
  const [selectedTargetLang, setSelectedTargetLang] = useState("Vietnamese");
  const [ocrProgress, setOcrProgress] = useState(0);
  const [activeTab, setActiveTab] = useState("original"); // "original" ho·∫∑c "translated"
  
  const fileInputRef = useRef(null);
  const pasteAreaRef = useRef(null);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn file
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      processImageFile(file);
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng k√©o th·∫£ file
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      processImageFile(e.dataTransfer.files[0]);
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng paste ·∫£nh
  const handlePaste = (e) => {
    const items = (e.clipboardData || e.originalEvent.clipboardData).items;
    
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf("image") !== -1) {
        const blob = items[i].getAsFile();
        processImageFile(blob);
        break;
      }
    }
  };

  // X·ª≠ l√Ω file ·∫£nh ƒë√£ ch·ªçn
  const processImageFile = (file) => {
    if (!file) return;
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if (!file.type.match('image.*')) {
      setError("Vui l√≤ng ch·ªçn file h√¨nh ·∫£nh");
      return;
    }
    
    // T·∫°o URL ƒë·ªÉ hi·ªÉn th·ªã preview
    const imageUrl = URL.createObjectURL(file);
    setPreviewUrl(imageUrl);
    setSelectedImage(file);
    setExtractedText("");
    setTranslatedText("");
    setError(null);
  };

  // X·ª≠ l√Ω OCR ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh
  const extractTextFromImage = async () => {
    if (!previewUrl) return;
    
    setIsProcessing(true);
    setOcrProgress(0);
    setError(null);
    
    try {
      // X√°c ƒë·ªãnh ng√¥n ng·ªØ OCR d·ª±a tr√™n ng√¥n ng·ªØ ngu·ªìn
      const langMap = {
        'English': 'eng',
        'Vietnamese': 'vie',
        'Chinese': 'chi_sim',
        'Japanese': 'jpn',
        'Korean': 'kor',
        'French': 'fra',
        'German': 'deu',
        'Spanish': 'spa'
      };
      
      const ocrLang = langMap[selectedSourceLang] || 'eng';
      
      // S·ª≠ d·ª•ng Tesseract.recognize thay v√¨ createWorker
      const result = await Tesseract.recognize(
        previewUrl,
        ocrLang,
        {
          logger: info => {
            if (info.status === 'recognizing text') {
              setOcrProgress(Math.round(info.progress * 100));
            }
          }
        }
      );
      
      // L·∫•y vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t
      const text = result.data.text;
      setExtractedText(text);
      
      // D·ªãch vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t
      if (text.trim()) {
        try {
          const translated = await translateWithGemini(
            text,
            selectedSourceLang,
            selectedTargetLang
          );
          setTranslatedText(translated);
        } catch (translationError) {
          console.error("Translation error:", translationError);
          setError(`L·ªói khi d·ªãch vƒÉn b·∫£n: ${translationError.message}`);
        }
      }
      
    } catch (err) {
      console.error("OCR error:", err);
      setError(`L·ªói khi x·ª≠ l√Ω ·∫£nh: ${err.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi ng√¥n ng·ªØ ngu·ªìn
  const handleSourceLanguageChange = (e) => {
    setSelectedSourceLang(e.target.value);
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi ng√¥n ng·ªØ ƒë√≠ch
  const handleTargetLanguageChange = (e) => {
    setSelectedTargetLang(e.target.value);
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã"
  const handleBrowseClick = () => {
    fileInputRef.current.click();
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "D√°n ·∫£nh t·ª´ clipboard"
  const handleClipboardClick = () => {
    if (pasteAreaRef.current) {
      pasteAreaRef.current.focus();
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X√≥a ·∫£nh"
  const handleClearImage = () => {
    setSelectedImage(null);
    setPreviewUrl(null);
    setExtractedText("");
    setTranslatedText("");
    setError(null);
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Copy vƒÉn b·∫£n"
  const handleCopyText = (text) => {
    navigator.clipboard.writeText(text);
    alert("ƒê√£ sao ch√©p vƒÉn b·∫£n v√†o clipboard!");
  };

  // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh khi k√©o th·∫£
  const preventDefault = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  return (
    <div className="image-translation">
      {!previewUrl ? (
        <div 
          className="upload-area" 
          onDrop={handleDrop}
          onDragOver={preventDefault}
          onDragEnter={preventDefault}
          onPaste={handlePaste}
          ref={pasteAreaRef}
          tabIndex="0"
        >
          <div className="upload-cloud-icon">
            <span role="img" aria-label="upload">üñºÔ∏è</span>
          </div>
          <div className="upload-text">K√©o th·∫£ ho·∫∑c d√°n ·∫£nh v√†o ƒë√¢y</div>
          <div className="upload-options">
            <button className="upload-btn" onClick={handleBrowseClick}>
              Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã
            </button>
            <button className="clipboard-btn" onClick={handleClipboardClick}>
              <span className="clipboard-icon">üìã</span>
              D√°n ·∫£nh t·ª´ clipboard
            </button>
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept="image/*"
              className="hidden-file-input"
            />
            <div className="supported-formats">
              H·ªó tr·ª£: JPG, PNG, GIF, BMP, WEBP
              <a href="#" className="learn-more-link">T√¨m hi·ªÉu th√™m</a>
            </div>
          </div>
        </div>
      ) : (
        <div className="image-translation-result">
          <div className="image-translation-header">
            <div className="language-selection">
              <div className="language-selector">
                <label>Ng√¥n ng·ªØ trong ·∫£nh:</label>
                <select value={selectedSourceLang} onChange={handleSourceLanguageChange}>
                  <option value="English">Ti·∫øng Anh</option>
                  <option value="Vietnamese">Ti·∫øng Vi·ªát</option>
                  <option value="Chinese">Ti·∫øng Trung</option>
                  <option value="Japanese">Ti·∫øng Nh·∫≠t</option>
                  <option value="Korean">Ti·∫øng H√†n</option>
                  <option value="French">Ti·∫øng Ph√°p</option>
                  <option value="German">Ti·∫øng ƒê·ª©c</option>
                  <option value="Spanish">Ti·∫øng T√¢y Ban Nha</option>
                </select>
              </div>
              <div className="language-swap">
                <button className="swap-button" onClick={() => {
                  const temp = selectedSourceLang;
                  setSelectedSourceLang(selectedTargetLang);
                  setSelectedTargetLang(temp);
                }}>
                  ‚áÑ
                </button>
              </div>
              <div className="language-selector">
                <label>D·ªãch sang:</label>
                <select value={selectedTargetLang} onChange={handleTargetLanguageChange}>
                  <option value="Vietnamese">Ti·∫øng Vi·ªát</option>
                  <option value="English">Ti·∫øng Anh</option>
                  <option value="Chinese">Ti·∫øng Trung</option>
                  <option value="Japanese">Ti·∫øng Nh·∫≠t</option>
                  <option value="Korean">Ti·∫øng H√†n</option>
                  <option value="French">Ti·∫øng Ph√°p</option>
                  <option value="German">Ti·∫øng ƒê·ª©c</option>
                  <option value="Spanish">Ti·∫øng T√¢y Ban Nha</option>
                </select>
              </div>
            </div>
            <div className="image-actions">
              <button 
                className="translate-button" 
                onClick={extractTextFromImage}
                disabled={isProcessing || !selectedImage}
              >
                {isProcessing ? `ƒêang x·ª≠ l√Ω... ${ocrProgress}%` : "Tr√≠ch xu·∫•t & D·ªãch"}
              </button>
              <button className="clear-button" onClick={handleClearImage}>
                X√≥a ·∫£nh
              </button>
            </div>
          </div>

          <div className="image-translation-content">
            <div className="image-preview-container">
              <img src={previewUrl} alt="Preview" className="image-preview" />
            </div>
            
            <div className="text-result-container">
              <div className="text-result-tabs">
                <button 
                  className={`tab-button ${activeTab === 'original' ? 'active' : ''}`}
                  onClick={() => setActiveTab('original')}
                >
                  VƒÉn b·∫£n g·ªëc
                </button>
                <button 
                  className={`tab-button ${activeTab === 'translated' ? 'active' : ''}`}
                  onClick={() => setActiveTab('translated')}
                >
                  B·∫£n d·ªãch
                </button>
              </div>
              
              <div className="text-result-content">
                {activeTab === 'original' ? (
                  <div className="text-result">
                    <textarea 
                      value={extractedText} 
                      readOnly 
                      placeholder="VƒÉn b·∫£n tr√≠ch xu·∫•t t·ª´ ·∫£nh s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."
                      className="text-result-area"
                    />
                    {extractedText && (
                      <button 
                        className="copy-button" 
                        onClick={() => handleCopyText(extractedText)}
                      >
                        üìã Sao ch√©p vƒÉn b·∫£n g·ªëc
                      </button>
                    )}
                  </div>
                ) : (
                  <div className="text-result">
                    <textarea 
                      value={translatedText} 
                      readOnly 
                      placeholder="B·∫£n d·ªãch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."
                      className="text-result-area"
                    />
                    {translatedText && (
                      <button 
                        className="copy-button" 
                        onClick={() => handleCopyText(translatedText)}
                      >
                        üìã Sao ch√©p b·∫£n d·ªãch
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {error && <div className="error-message">{error}</div>}
        </div>
      )}
    </div>
  );
}
